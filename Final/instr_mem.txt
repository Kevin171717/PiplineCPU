00
00
03
8C

// multu $31, $31 ;000000 11111 11111 0000000000 011001
19
00
FF
03

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

// mflo 000000 00000 00011 00000 010010 move Lo into r3
12
18
00
00

// multu 000000 00110 00111 0000000000 011001 (r6 * r7) = 42
19
00
C7
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

00
00
00
00

// mflo 000000 00000 00011 00000 010010 move Lo into r3
12
18
00
00

00
00
00
00

00
00
00
00

// sll 000000 00000 00011 11100 00010 000000 shift r3 << 2bit into r28
80
E0
03
00

// andi 001100 00011 00011 1111111111111111
FF
FF
63
30


// J 000010 00000000000000000000 000100 jump to 0+4 -> addr = 16
04
00
00
08

00
00
00
00

00
00
00
00

00
00
00
00

// JR 000000 01110 00000 00000 00000 001000 (jump to 16)
08
00
C0
01

00
00
00
00

00
00
00
00

// beq	$zero, $zero, 5
05
00
00
10

00
00
00
00

00
00
00
00

00
00
00
00
// add	$s2, $s0, $s2
20
90
50
02
// sub	$s2, $s0, $s2
22
90
50
02
// add	$s1, $s0, $s1, 0
20
88
30
02
// j	7
07
00
00
08
// or	$s2, $s0, $s2
25
90
50
02
// add	$s1, $s0, $s1, 0
20
88
30
02
// sub	$s2, $s0, $s2
22
90
50
02
// or	$s2, $s0, $s2
25
90
50
02
// sw 	$zero, $s2, 24
18
00
12
AC